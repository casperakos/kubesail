name: Build and Release

on:
  push:
    branches:
      - main
      - master
      - develop
  pull_request:
    branches:
      - main
      - master
      - develop
  workflow_dispatch:
  release:
    types: [created]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS ARM (Apple Silicon)
          - platform: macos-latest
            target: aarch64-apple-darwin
            arch: arm64
            os: macos

          # macOS Intel
          - platform: macos-latest
            target: x86_64-apple-darwin
            arch: x64
            os: macos

          # Linux x64
          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            arch: x64
            os: linux

          # Windows x64
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x64
            os: windows

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      # Linux-specific dependencies
      - name: Install Linux dependencies
        if: matrix.os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf \
            libssl-dev

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: pnpm install

      # Build the Tauri app
      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          # macOS code signing (only used if secrets are configured)
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          tagName: v__VERSION__
          releaseName: 'KubeSail v__VERSION__'
          releaseBody: 'See the CHANGELOG.md for details.'
          releaseDraft: true
          prerelease: false
          args: --target ${{ matrix.target }}

      # Upload artifacts for non-release builds
      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos' && github.event_name != 'release'
        uses: actions/upload-artifact@v4
        with:
          name: kubesail-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
            src-tauri/target/${{ matrix.target }}/release/bundle/macos/*.app

      - name: Upload artifacts (Linux)
        if: matrix.os == 'linux' && github.event_name != 'release'
        uses: actions/upload-artifact@v4
        with:
          name: kubesail-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
            src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage
            src-tauri/target/${{ matrix.target }}/release/bundle/rpm/*.rpm

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows' && github.event_name != 'release'
        uses: actions/upload-artifact@v4
        with:
          name: kubesail-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
            src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe

  # Optional: Create a summary job that depends on all builds
  build-complete:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Build summary
        run: |
          echo "âœ… All platform builds completed successfully!"
          echo "Built for: macOS (ARM + Intel), Linux (x64), Windows (x64)"
